// ###########################################
// Script for Google Earth Engine (https://code.earthengine.google.com/)
// To extract bioclimatic variables from plot locations
// This is an example scipt showing the extraction of only bio01 and bio02
// Part of the project: Habitat-specificity of climate-trait relationships
// script by: Dr. Stephan Kambach (stephan.kambach@gmail.com)
// google earth engine code
// visit https://biodiv-feedbacks.org/
// #########################################

// load data
var bio01 = ee.Image("users/StephanKambach/CHELSA_bio01"); // CHELSA bioclim1 
var bio02 = ee.Image("users/StephanKambach/CHELSA_bio02"); // CHELSA bioclim2
var EVA_borders = ee.Table("users/StephanKambach/EVA_borders"); // Polygone delineating the rough borders of the EVA database
var table = ee.Table("users/StephanKambach/data_for_gee_unique_coordinates"); // table containing ID, latitude and longitude of plots

// function to create a circular buffer zone around coordinates
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}

// function to calculate the mean of bioclimatic variables across a buffer zone
function zonalStats(ic, fc, params) {
  // Initialize internal params dictionary.
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:MM:ss'
  };

  // Replace initialized params with provided params.
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }

  // Set default parameters based on an image representative.
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;

  // Map the reduceRegions function over the image collection.
  var results = ic.map(function(img) {
    // Select bands (optionally rename), set a datetime & timestamp property.
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));

    // Define final image property dictionary to set in output features.
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);

    // Subset points that intersect the given image.
    var fcSub = fc.filterBounds(img.geometry());

    // Reduce the image by regions.
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    // Add metadata to each feature.
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));

  return results;
}

// Define parameters for the zonalStats function.
var params = {
  reducer: ee.Reducer.mean(),
  scale: 1000,
  crs: 'EPSG:4326',
  bands: [0,1,2],
  bandsRename: ['bio01','bio02', 'bio03']
};

// compile chelsa data
var bio_all = ee.Image.cat(bio01, bio02, bio03)
  .rename(['bio01','bio02', 'bio03'])
  .set('system:time_start', ee.Date('2000-01-01').millis());

var bio_all = ee.ImageCollection([bio_all])
  .map(function(image) { return image.clip(ee.Geometry(EVA_borders)); });

// filter input table and calculate buffer
var table_buffered = table.map(bufferPoints(500, false));

// extract raster data
var results = zonalStats(bio_all, table_buffered, params);

// Generic Function to remove a property from a feature
var removeProperty = function(feat, property) {
  var properties = feat.propertyNames()
  var selectProperties = properties.filter(ee.Filter.neq('item', property))
  return feat.select(selectProperties)
}

// remove unneccessary columns
var results_new = results.map(function(feat) {
   return removeProperty(feat, 'geometry')
})

// check results before actually running the script on servers
//print(results_new.limit(10)); 

// save results as .csv
ee.List(['long_lat_ID', 'bio01', 'bio02'])
.evaluate(function (selectors) {
    Export.table.toDrive({
      folder: 'Postdoc_FeedBaCks',
      collection: results_new,
      description: 'bio01-03_1km',
      fileFormat: 'CSV',
      selectors: selectors
    })
  })
